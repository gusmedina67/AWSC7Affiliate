service: commerce7-affiliate-api
frameworkVersion: '3'

custom:
  affiliateTable: Affiliates

provider:
  name: aws
  runtime: python3.10
  timeout: 30
  memorySize: 128

  stage: stg
  region: us-west-1

  logs:
    restApi: true
    httpApi: true

  environment:
    AFFILIATE_ORDERS_TABLE: AffiliateOrders
    AFFILIATE_TABLE: Affiliates
    TENANT_SETTINGS_TABLE: TenantSettings
    COMMISSION_TABLE: CommissionSettings
    STRIPE_SECRET_KEY: sk_test_XXXXXX
    C7_API_KEY: YWZmaWxpYXRlLW1hcmtldGluZzpMdm0yQjk2RzFaUnBmak96dzFORkRIYUpiaVZIV2ZFNHZXaEJaaXZ4bmJOTWliTXJQQndtWnR1SUhOU05kMVFX
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
            - "dynamodb:Scan"
            - "dynamodb:BatchWriteItem"
          Resource:
            - "arn:aws:dynamodb:us-west-1:655957386383:table/AffiliateOrders"
            - "arn:aws:dynamodb:us-west-1:655957386383:table/AffiliateOrders/index/TenantAffiliateIndex"
            - "arn:aws:dynamodb:us-west-1:655957386383:table/Affiliates"
            - "arn:aws:dynamodb:us-west-1:655957386383:table/Affiliates/index/CustomerIdIndex"
            - "arn:aws:dynamodb:us-west-1:655957386383:table/TenantSettings"
            - "arn:aws:dynamodb:us-west-1:655957386383:table/CommissionSettings"

functions:
  # ✅ Webhook for order tracking
  orderWebhook:
    handler: handler.webhook_handler
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: webhook/order
          method: post
          cors: true

  getAffiliateOrders:
    handler: handler.get_affiliate_orders
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: affiliate-orders
          method: get
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  # ✅ Affiliate management API (CRUD)
  createAffiliate:
    handler: handler.create_affiliate
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: affiliate
          method: post
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  getAffiliates:
    handler: handler.get_affiliates
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: affiliates
          method: get
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  deleteAffiliate:
    handler: handler.delete_affiliate
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: affiliate/{id}
          method: delete
          cors: true

  # ✅ Payout processing with Stripe
  processPayout:
    handler: handler.process_payout
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: payout
          method: post
          cors: true

  updateAffiliateStatus:
    handler: handler.update_affiliate_status
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: update-affiliate-status
          method: post
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  generateAffiliateLink:
    handler: handler.generate_affiliate_link
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: generate-affiliate-link
          method: post
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  setTenantBaseUrl:
    handler: handler.set_tenant_base_url
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: set-tenant-base-url
          method: post
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  # ✅ Save tenant commission program settings
  saveCommissionProgram:
    handler: commission_handler.save_commission_program
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: commission-program
          method: post
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  # ✅ Get tenant commission program settings
  getCommissionProgram:
    handler: commission_handler.get_commission_program
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: commission-program
          method: get
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  # ✅ Retrieve all products from Commerce7 using pagination
  getProducts:
    handler: commission_handler.get_products
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: products
          method: get
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  # ✅ Search for specific products using type-ahead functionality
  searchProducts:
    handler: commission_handler.search_products
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: products/search
          method: get
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

  # ✅ Save commission rate for a product using Commerce7 Custom Fields
  saveProductCommission:
    handler: commission_handler.save_product_commission
    layers:
      - arn:aws:lambda:us-west-1:655957386383:layer:requests-layer:1
    events:
      - http:
          path: product/commission
          method: post
          cors:
            origins: "*"
            headers:
              - Content-Type
              - Authorization
            methods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE

resources:
  Resources:
    # ✅ Multi-tenant Affiliate Orders table
    AffiliateOrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AffiliateOrders
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: orderId
            AttributeType: S
          - AttributeName: affiliateId
            AttributeType: S  # ✅ Added for the new GSI
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: orderId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: TenantAffiliateIndex  # ✅ New GSI for `tenantId` and `affiliateId`
            KeySchema:
              - AttributeName: tenantId
                KeyType: HASH
              - AttributeName: affiliateId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL  # ✅ Includes all attributes in the index
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PROVISIONED # Provisioned throughput mode
        ProvisionedThroughput: # Minimal configuration for cost-effectiveness
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification: # Enable server-side encryption
          SSEEnabled: true

    # ✅ Multi-tenant Affiliates table
    AffiliatesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.affiliateTable}
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: affiliateId
            AttributeType: S
          - AttributeName: customerId
            AttributeType: S  # Required for GSI
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: affiliateId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: CustomerIdIndex
            KeySchema:
              - AttributeName: customerId
                KeyType: HASH
              - AttributeName: tenantId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:  # ✅ Fix: Add provisioned throughput to GSI
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        BillingMode: PROVISIONED  # Provisioned throughput mode
        ProvisionedThroughput: # Minimal configuration for cost-effectiveness
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification: # Enable server-side encryption
          SSEEnabled: true

    # ✅ Multi-tenant Settings table
    TenantSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TenantSettings
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
        BillingMode: PROVISIONED # Provisioned throughput mode
        ProvisionedThroughput: # Minimal configuration for cost-effectiveness
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification: # Enable server-side encryption
          SSEEnabled: true

    # ✅ Table for storing commission program settings
    CommissionSettingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: CommissionSettings
        AttributeDefinitions:
          - AttributeName: tenantId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: tenantId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
